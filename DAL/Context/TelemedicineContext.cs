// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DAL.Entities;

namespace DAL.Context
{
    public partial class TelemedicineContext : DbContext
    {
        public TelemedicineContext()
        {
        }

        public TelemedicineContext(DbContextOptions<TelemedicineContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<DeviceReading> DeviceReadings { get; set; }
        public virtual DbSet<DocAttacment> DocAttacments { get; set; }
        public virtual DbSet<DocConclusion> DocConclusions { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Followup> Followups { get; set; }
        public virtual DbSet<MedicalDevice> MedicalDevices { get; set; }
        public virtual DbSet<MedicalRecord> MedicalRecords { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<TestAttachment> TestAttachments { get; set; }
        public virtual DbSet<TestsResult> TestsResults { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("MedconnectionContext");

            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Appointment>(entity =>
            {
                entity.HasOne(d => d.Admin)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.AdminId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("admin control appointment");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.DocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("doctors reschudle appointments");

                entity.HasOne(d => d.Followup)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.FollowupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("appointment has many followup");

                entity.HasOne(d => d.Patient)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.PatientId)
                    .HasConstraintName("patient book an appointment");
            });

            modelBuilder.Entity<Attachment>(entity =>
            {
                entity.HasOne(d => d.Followup)
                    .WithMany(p => p.Attachments)
                    .HasForeignKey(d => d.FollowupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_followup_has_attachment");
            });

            modelBuilder.Entity<DeviceReading>(entity =>
            {
                entity.HasKey(e => new { e.DeviceId, e.RecordId });

                entity.HasOne(d => d.Device)
                    .WithMany(p => p.DeviceReadings)
                    .HasForeignKey(d => d.DeviceId)
                    .HasConstraintName("medical device sen reading");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.DeviceReadings)
                    .HasForeignKey(d => d.RecordId)
                    .HasConstraintName("medical recore receive reading");
            });

            modelBuilder.Entity<DocAttacment>(entity =>
            {
                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.DocAttacments)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("doctors has attachment");
            });

            modelBuilder.Entity<DocConclusion>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.RecordId });

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.DocConclusions)
                    .HasForeignKey(d => d.DocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("doctor write prescription");

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.DocConclusions)
                    .HasForeignKey(d => d.RecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("medical record receive prescription");
            });

            modelBuilder.Entity<Followup>(entity =>
            {
                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.Followups)
                    .HasForeignKey(d => d.DocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_doctor_receive_message");

                entity.HasOne(d => d.Patient)
                    .WithMany(p => p.Followups)
                    .HasForeignKey(d => d.PatientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_patient_send_message");
            });

            modelBuilder.Entity<MedicalRecord>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__medical___BFCFB4DD459675FF");

                entity.HasOne(d => d.Patient)
                    .WithMany(p => p.MedicalRecords)
                    .HasForeignKey(d => d.PatientId)
                    .HasConstraintName("patient has medical record");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasOne(d => d.Followup)
                    .WithMany(p => p.Messages)
                    .HasForeignKey(d => d.FollowupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_followup_has_messages");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasOne(d => d.Admin)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.AdminId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("services added by an admin");
            });

            modelBuilder.Entity<Test>(entity =>
            {
                entity.HasOne(d => d.Patient)
                    .WithMany(p => p.Tests)
                    .HasForeignKey(d => d.PatientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_test_patient");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Tests)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_test_services");
            });

            modelBuilder.Entity<TestAttachment>(entity =>
            {
                entity.HasOne(d => d.Test)
                    .WithMany(p => p.TestAttachments)
                    .HasForeignKey(d => d.TestId)
                    .HasConstraintName("every test has attachment");
            });

            modelBuilder.Entity<TestsResult>(entity =>
            {
                entity.HasKey(e => new { e.TestId, e.RecordId });

                entity.HasOne(d => d.Record)
                    .WithMany(p => p.TestsResults)
                    .HasForeignKey(d => d.RecordId)
                    .HasConstraintName("medical record receives results");

                entity.HasOne(d => d.Test)
                    .WithMany(p => p.TestsResults)
                    .HasForeignKey(d => d.TestId)
                    .HasConstraintName("test sends results");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}